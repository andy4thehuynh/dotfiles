" Example Vim configuration.
" Copy or symlink to ~/.vimrc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"  General Vim Settings
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" EXPERIMENT - Tpope sensible says it handles this
" set nocompatible                  " Must come first because it changes other options.

set number                        " Show line numbers.
syntax on                         " Enables syntax highlighting

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.
set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=10                  " Show 10 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.
set shell=/usr/local/bin/zsh      " Setting shell for vim

filetype plugin on                " syntax completion
set ofu=syntaxcomplete#complete

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set noswapfile                    " No swap files
set directory=.,$TEMP             " Keep swap files in one location
set backupdir=.,$TEMP

set expandtab                     " Use spaces instead of tabs
set laststatus=2                  " Show the status line all the time

:set number relativenumber        " turn hybrid line numbers on
:set nu rnu

setlocal shiftwidth=2             " Sets default width using tabs and spaces
setlocal tabstop=2

let &t_SI .= "\<Esc>[5 q"         " Map cursor for insert mode
" solid block
let &t_EI .= "\<Esc>[2 q"
" " 1 or 0 -> blinking block
" " 3 -> blinking underscore
" " Recent versions of xterm (282 or above) also support
" " 5 -> blinking vertical bar
" " 6 -> solid vertical bar

" Vim Splitting
map <Leader>- :split<CR>
map <Leader><bar> :vsplit<CR>

" Removing search highlighting
nnoremap <ESC><ESC> :nohlsearch<CR>

" Split navigation resizing
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Disable arrow keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

" Toggle Paste
map <Leader>p :set paste<CR>
map <Leader>P :set nopaste<CR>

" Avoiding the 'Hit ENTER to continue' prompts
set shortmess=at

" source: https://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file
autocmd FileType json syntax match Comment +\/\/.\+$+

" Useful status information at bottom of screen [tpope's statusline]
" set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Syntax highlighting for Golang
set rtp+=$GOROOT/misc/vim


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"  Vim Plug package manager
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin()

Plug 'christoomey/vim-tmux-navigator'
Plug 'dracula/vim', { 'as': 'dracula'  }
Plug 'ekalinin/Dockerfile.vim'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'godlygeek/tabular'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'leshill/vim-json'
Plug 'mattn/emmet-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'mileszs/ack.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pangloss/vim-javascript'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tomlion/vim-solidity'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'wuelnerdotexe/vim-astro'
Plug 'yuezk/vim-js'
" Plug 'waiting-for-dev/vim-www'

" Plugins that are dependent on another plugin
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

Plug 'mattn/webapi-vim'
Plug 'mattn/vim-gist'

Plug 'jgdavey/vim-turbux'
Plug 'preservim/vimux'

all plug#end()

# Must include after plug#end for Dracula
:PlugInstall
colorscheme dracula



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"  Plugin Configurations
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug 'scrooloose/nerdtree' Typescript syntax highlighting
let g:astro_typescript = 'enable'


" ctags
" set tags=./tags;/


" Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
let NERDTreeShowHidden=0          " does not show hidden files by default
map <leader>n :NERDTreeToggle<cr>


" Plug 'ryanoasis/vim-devicons'
set encoding=UTF-8


" Plug 'junegunn/fzf.vim'
" set rtp+=/usr/local/opt/fzf
noremap <C-P> :Files<CR>
map <leader>/ :Ag<Space>


" Plug 'mattn/vim-gist'
map <leader>G :Gist<Space>


" Plug 'tpope/vim-fugitive'
map <leader>gb :Git blame<cr>
map <leader>gB :GBrowse<cr>
" spell checking and automatic wrapping at the recommended 72 columns for commit msgs
autocmd Filetype gitcommit setlocal spell textwidth=72


" Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0      " Only works on HTML and CSS files
autocmd FileType html,css EmmetInstall
let g:user_emmet_settings = { 'erb': { 'extends': 'html' } }
let g:user_emmet_leader_key='<C-e>'


" Plug 'tpope/vim-ragtag'
let g:ragtag_global_maps = 1      " Only works on HTML and CSS files


" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
let g:go_fmt_command = "goimports"
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>i <Plug>(go-install)
au FileType go nmap <leader>gd <Plug>(go-doc)
let g:go_def_mode='gopls'          " Uses an LSP for intelligent go recommendations
let g:go_info_mode='gopls'


" Plug 'godlygeek/tabular'
map :tab :Tabularize /=


" Plug 'maxmellon/vim-jsx-pretty'
" Colorful style (vim-javascript only)
let g:vim_jsx_pretty_colorful_config = 1 " default 0


" Plug 'peitalin/vim-jsx-typescript'
" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact


" Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [ 'coc-tsserver', 'coc-solidity', 'coc-svelte', '@yaegassy/coc-tailwindcss3', 'coc-solargraph' ]
"Conditionally use Prettier or Eslint if present in node_modules folder
if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif
if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif
" show documentation for the word under the cursor
nnoremap <silent> K :call CocAction('doHover')<CR>
" See either the diagnostic if it exists, otherwise the documentation
" source: https://thoughtbot.com/blog/modern-typescript-and-react-development-in-vim#auto-formatting
function! ShowDocIfNoDiagnostic(timer_id)
  if (coc#float#has_float() == 0 && CocHasProvider('hover') == 1)
    silent call CocActionAsync('doHover')
  endif
endfunction
function! s:show_hover_doc()
  call timer_start(500, 'ShowDocIfNoDiagnostic')
endfunction
autocmd CursorHoldI * :call <SID>show_hover_doc()
autocmd CursorHold * :call <SID>show_hover_doc()
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction
